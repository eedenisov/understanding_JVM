
// ClassLoader Загружает класс JvmComprehension
// С помощью подсистемы загрузчиков классов в следующей последовательности:
// Application ClassLoader -> Platform ClassLoader -> Bootstrap ClassLoader ->
// Bootstrap ClassLoader -> Platform ClassLoader -> Application ClassLoader
public class JvmComprehension { // 0 строка: Информация о JvmComprehension.class хранится в область памяти MetaSpace;
                                // 0 строка: Точка входа для выполнения программы.

    public static void main(String[] args) { // 1 строка: В Stack создаётся фрейм main() в момент вызова метода;
                                             // 1 строка(параметр): В heap(куча) создаётся объект массива типа String;
                                             // 1 строка(параметр): В Stack во фрейм main() будет присвоена
                                             // 1 строка(параметр): ссылка на объект "args".

        int i = 1;                      // 2 строка: В Stack во фрейм main() создается переменная "i" типа int и
                                        // 2 строка: присваивается значение "1".

        Object o = new Object();        // 3 строка: В heap(куча) создаётся объект типа Object;
                                        // 3 строка: В Stack во фрейм main() будет присвоена ссылка на
                                        // 3 строка: объект "o".

        Integer ii = 2;                 // 4 строка: В heap(куча) создаётся объект типа Integer со значением "2";
                                        // 4 строка: В Stack во фрейм main() будет присвоена ссылка на объект "ii".

        printAll(o, i, ii);             // 5 строка: В Stack создаётся фрейм printAll() в момент вызова метода;
                                        // 5 строка(параметр): В Stack во фрейм printAll() передастся переменная "i"
                                        // 5 строка(параметр): типа int со значением "2";
                                        // 5 строка(параметр): В Stack во фрейм printAll() будет присвоена ссылка на
                                        // 5 строка(параметр): объекты "o" и "ii".

        System.out.println("finished"); // 6 строка: В Stack создаётся фрейм println() в момент вызова метода
    }                                   // 6 строка(параметр): и присваивается ссылка на объект типа String со
                                        // 6 строка(параметр): значением "finished".

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;       // 7 строка: В heap(куча) создаётся объект типа Integer со значением "700";
                                        // 7 строка: В Stack во фрейм printAll() будет присвоена ссылка на объект
                                        // 7 строка: "uselessVar".

        System.out.println(o.toString() + i + ii); // 8 строка: В Stack создаётся фрейм println() в момент вызова метода,
                                                   // 8 строка(параметр): куда передаются ссылки на объекты "о" и "ii",
                                                   // 8 строка(параметр): также передаётся переменная "i" со значением "1";
                                                   // 8 строка(параметр): В Stack создаётся фрейм toString().

        // Сборка мусора происходит периодически, когда объекты из памяти heap(куча) больше не используются.
        // В данном проекте 1 объект типа Integer не имеет ссылки и является недостижимым объектом с присвоенной
        // ссылкой на объект "uselessVar"(после сборки мусора он удалится).
    }
}
